#ifndef GIT_GUD_HPP
#define GIT_GUD_HPP

#include <memory>
#include <vector>

namespace git_gud
{

	class Commit
	{

		private:

			int commitID;
			int branchID;

			std::vector<std::shared_ptr<Commit>> parents;
			std::vector<std::shared_ptr<Commit>> children;

			int generateID();

		public:
			Commit(int branchID); // autogenerated ID
			Commit(int branchID, int commitID); // pregenerated ID

			int getID() const;
			int getBranch() const;
			std::vector<std::shared_ptr<Commit>>& getParents();
			std::vector<std::shared_ptr<Commit>>& getChildren();

			void addParent(std::shared_ptr<Commit> parent);
			void addChild(std::shared_ptr<Commit> child);

			// not implemented
			bool removeParent(int id);
			bool removeChild(int id);
	};

	class GitTree
	{
		private:

			std::vector<std::shared_ptr<Commit>> commits;
			int numBranches = 0;

			int generateBranchID();

		public:

			GitTree();

			std::shared_ptr<Commit> getCommit(int ID) const;

			std::shared_ptr<Commit> getLatest() const;
			std::shared_ptr<Commit> getLatest(int branchID) const;

			std::vector<std::shared_ptr<Commit>>& getAllCommits();
			int getNumBranches() const;

			void addCommit(int parentID);
			void addCommitNewBranch(int parentID);
	};
}

#endif