#ifndef GIT_GUD_HPP
#define GIT_GUD_HPP

#include <memory>
#include <vector>

namespace git_gud
{

	/**
	 * Commits make the nodes of the GitTree. Each may have several
	 * parents and several children. Each MUST have a unique ID.
	 *
	 * @author Michael Bianconi
	 */
	class Commit
	{

		private:

			int commitID;
			int branchID;

			std::vector<std::shared_ptr<Commit> > parents;
			std::vector<std::shared_ptr<Commit> > children;

			/**
			 * @return Returns a unique, sequential ID.
			 */
			int generateID();

		public:

			/**
			 * Creates a new Commit on the specified branch and with
			 * a unique ID.
			 *
			 * @param branchID The ID of the branch.
			 */
			Commit(int branchID); // autogenerated ID

			/**
			 * Creates a new Commit on the specified branch.
			 *
			 * @param branchID The ID of the branch.
			 * @param commitID The ID of the commit.
			 */
			Commit(int branchID, int commitID); // pregenerated ID

			int getID() const;
			int getBranch() const;
			std::vector<std::shared_ptr<Commit> >& getParents();
			std::vector<std::shared_ptr<Commit> >& getChildren();

			void addParent(std::shared_ptr<Commit> parent);
			void addChild(std::shared_ptr<Commit> child);

			// not implemented
			void removeParent(int id);
			void removeChild(int id);

			void print();
	};

	class GitTree
	{
		private:

			std::vector<std::shared_ptr<Commit> > commits;
			int numBranches = 0;

			int generateBranchID();

		public:

			GitTree();

			std::shared_ptr<Commit> getCommit(int ID) const;

			std::shared_ptr<Commit> getLatest() const;
			std::shared_ptr<Commit> getLatest(int branchID) const;

			std::vector<std::shared_ptr<Commit> >& getAllCommits();
			int getNumBranches() const;
			int getNumCommits() const;

			void addCommit();
			void addCommit(int parentID);
			void addCommitNewBranch(int parentID);

			/**
			 * Removes the last Commit from the tree. If there is
			 * only one node, do nothing.
			 */
			void undo();

			void print() const;
	};
}

#endif